generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @db.VarChar(36) @id @default(uuid())
  username            String             @db.VarChar(255)
  displayName         String             @db.VarChar(255) @map("display_name")
  email               String             @db.VarChar(255)
  password            String             @db.VarChar(255)
  avatar              String?            @db.VarChar(255)
  favoriteColor       String?            @db.VarChar(7) @map("favorite_color")
  createdAt           DateTime?          @default(now()) @db.DateTime(0) @map("created_at")
  updatedAt           DateTime?          @default(now()) @db.DateTime(0) @map("updated_at")
  deletedAt           DateTime?          @db.Timestamp(0) @map("deleted_at")
  githubId            String?            @db.VarChar(255) @map("github_id")
  googleId            String?            @db.VarChar(255) @map("google_id")
  magicLinks          MagicLink[]
  passwordRecoveries  PasswordRecovery[]

  @@map("users")
}

model MagicLink {
  id        String    @db.VarChar(36) @id @default(uuid())
  userId    String    @db.VarChar(36) @map("user_id")
  code      String    @db.VarChar(32)
  expiresAt DateTime  @default(now()) @db.Timestamp(0) @map("expires_at")
  createdAt DateTime  @default(now()) @db.Timestamp(0) @map("created_at")
  updatedAt DateTime  @default(now()) @db.Timestamp(0) @map("updated_at")
  deletedAt DateTime? @db.Timestamp(0) @map("deleted_at")
  users     User      @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "magic_links_user_id_foreign")

  @@map("magic_links")
  @@index([userId], map: "magic_links_user_id_foreign")
}

model PasswordRecovery {
  id         String    @db.VarChar(36) @id @default(uuid())
  userId    String     @db.VarChar(36)
  code       String    @db.VarChar(64)
  expiresAt DateTime   @default(now()) @db.Timestamp(0) @map("expires_at")
  createdAt DateTime   @default(now()) @db.Timestamp(0) @map("created_at")
  updatedAt DateTime   @default(now()) @db.Timestamp(0) @map("updated_at")
  deletedAt DateTime?  @db.Timestamp(0) @map("deleted_at")
  users      User      @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "password_recoveries_user_id_foreign")

  @@map("password_recoveries")
  @@index([userId], map: "password_recoveries_user_id_foreign")
}


model Document {
  id             String    @db.VarChar(36) @id @default(uuid())
  title          String    @db.VarChar(255)
  content        String?   @db.LongText
  binaryContent  Bytes?    @db.Blob @map("binary_content")
  createdAt      DateTime  @default(now()) @db.Timestamp(0) @map("created_at")
  updatedAt      DateTime  @default(now()) @db.Timestamp(0) @map("updated_at")
  deletedAt      DateTime? @db.Timestamp(0) @map("deleted_at")

  @@map("documents")
}