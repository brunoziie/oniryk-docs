generator client {
	provider        = "prisma-client-js"
	previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
	provider     = "mysql"
	url          = env("DATABASE_URL")
}

abstract model BaseModel {
	id String @id @default(uuid()) @db.VarChar(36)
	createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
	updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)
	deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
}

model User extends BaseModel {
	username String @db.VarChar(255)
	displayName String @map("display_name") @db.VarChar(255)
	email String @db.VarChar(255)
	password String @db.VarChar(255)
	avatar String? @db.VarChar(255)
	favoriteColor String? @map("favorite_color") @db.VarChar(7)
	githubId String? @map("github_id") @db.VarChar(255)
	googleId String? @map("google_id") @db.VarChar(255)
	magicLinks MagicLink[]
	passwordRecoveries PasswordRecovery[]
	ownership Ownership[]

	@@fulltext([displayName])
	@@fulltext([username, displayName, email])
	@@map("users")
}

model MagicLink extends BaseModel {
	userId String @map("user_id") @db.VarChar(36)
	code String @db.VarChar(32)
	expiresAt DateTime @default(now()) @map("expires_at") @db.Timestamp(0)
	users User @relation(fields: [userId], references: [id], onUpdate: Restrict)

	@@map("magic_links")
}

model PasswordRecovery extends BaseModel {
	userId String @db.VarChar(36)
	code String @db.VarChar(64)
	expiresAt DateTime @map("expires_at") @db.Timestamp(0)
	user User @relation(fields: [userId], references: [id], onUpdate: Restrict)

	@@map("password_recoveries")
}

model Document extends BaseModel {
	title String @db.VarChar(255)
	content String? @db.LongText
	searchableContent String? @db.LongText
	binaryContent Bytes? @map("binary_content") @db.Blob

	@@fulltext([searchableContent])
	@@map("documents")
}

model Project extends BaseModel {
	title String @db.VarChar(255)
	description String? @db.Text

	@@fulltext([title, description])
	@@map("projects")
}

model Team extends BaseModel {
	name String @db.VarChar(255)
	ownerships Ownership[]
	@@map("teams")
}

enum EntityType {
	project
	document
  team
}

model Ownership extends BaseModel {
	entity EntityType
	entityId String @map("entity_id") @db.VarChar(36)
	level OwnershipLevel

	userId String? @db.VarChar(36)
	user User? @relation(fields: [userId], references: [id])
	teamId String? @db.VarChar(36)
	team Team? @relation(fields: [teamId], references: [id])

	@@index([entityId])
	@@index([userId])
	@@index([teamId])
	@@index([entity, entityId])
	@@index([entity, entityId, userId])
	@@index([entity, entityId, teamId])
	@@map("ownerships")
}

enum OwnershipLevel {
	owner
	viewer
	writer
}
